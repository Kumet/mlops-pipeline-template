name: release-deploy

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      enable_deploy:
        description: "Set to true to enable actual AWS/GCP deploy. Default is dry-run."
        required: false
        default: "false"
      enable_terraform_apply:
        description: "Set to true to run Terraform apply (otherwise plan is skipped)."
        required: false
        default: "false"

permissions:
  contents: read
  id-token: write

env:
  ENABLE_DEPLOY: ${{ (github.event_name == 'workflow_dispatch' && inputs.enable_deploy) || 'false' }}
  ENABLE_TERRAFORM_APPLY: ${{ (github.event_name == 'workflow_dispatch' && inputs.enable_terraform_apply) || 'false' }}
  AWS_REGION: us-east-1
  AWS_ECR_REPOSITORY: mlops-serving
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID || '000000000000' }}
  GCP_REGION: us-central1
  GCP_PROJECT_ID: your-gcp-project
  DOCKER_IMAGE: mlops-serving:${{ github.ref_name }}

jobs:
  release:
    name: Build & Template Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up uv
        uses: astral-sh/setup-uv@v2

      - name: Sync dependencies
        run: uv sync --frozen

      - name: Prefect pipeline dry-run
        run: |
          echo "Running DVC pipeline & Prefect flow as verification (dry-run)."
          uv run dvc repro
          uv run python flows/train_register_deploy.py

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKER_IMAGE }}
            ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/mlops/${{ env.DOCKER_IMAGE }}
          tags: |
            type=raw,value=${{ github.ref_name }}

      - name: Build container (dry-run)
        if: env.ENABLE_DEPLOY != 'true'
        run: |
          echo "ENABLE_DEPLOY is not true; skipping real build/push."
          echo "This workflow currently runs in template mode for safety."

      - name: Configure AWS credentials
        if: env.ENABLE_DEPLOY == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}

      - name: Login to Amazon ECR
        if: env.ENABLE_DEPLOY == 'true'
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push to Amazon ECR
        if: env.ENABLE_DEPLOY == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: src/serving/Dockerfile
          push: true
          build-args: |
            FLAVOR=cpu
          tags: |
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.AWS_ECR_REPOSITORY }}:${{ github.ref_name }}

      - name: Set up gcloud
        if: env.ENABLE_DEPLOY == 'true'
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Authenticate Artifact Registry
        if: env.ENABLE_DEPLOY == 'true'
        run: |
          gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Push to Artifact Registry
        if: env.ENABLE_DEPLOY == 'true'
        run: |
          docker build -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/mlops/${{ env.DOCKER_IMAGE }} -f src/serving/Dockerfile .
          docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/mlops/${{ env.DOCKER_IMAGE }}

      - name: Deploy to Cloud Run
        if: env.ENABLE_DEPLOY == 'true'
        run: |
          gcloud run deploy mlops-serving-api \
            --image ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/mlops/${{ env.DOCKER_IMAGE }} \
            --region ${{ env.GCP_REGION }} \
            --platform managed \
            --allow-unauthenticated

  terraform:
    name: Terraform IaC (template)
    runs-on: ubuntu-latest
    needs: release
    defaults:
      run:
        working-directory: infra/terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        run: terraform init

      - name: Terraform plan (dry-run)
        if: env.ENABLE_TERRAFORM_APPLY != 'true'
        run: |
          echo "ENABLE_TERRAFORM_APPLY is not true; skipping plan/apply."
          echo "Run locally with terraform init/plan/apply using the provided infra templates."

      - name: Terraform plan
        if: env.ENABLE_TERRAFORM_APPLY == 'true'
        run: terraform plan -out=tfplan

      - name: Terraform apply
        if: env.ENABLE_TERRAFORM_APPLY == 'true'
        run: terraform apply -auto-approve tfplan
